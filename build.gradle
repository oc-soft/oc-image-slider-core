

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.31'
    id 'net.oc_soft.msgfmt' version '0.1.0'
}

repositories {
    jcenter()
}

ext.appNames = [
    [ 'main', 'main' ],
    [ 'site-mgr', 'SiteManager' ],
    [ 'post-mgr', 'PostsManager' ],
    [ 'post', 'Post' ],
    [ 'message-mgr', 'MessageMgr' ]
]

ext.jarApp = [
    output: "${buildDir}/jar/${rootProject.name}",
    exeSh: "gen.sh"
]

ext.jarWpFetchApp = [
    output: "${buildDir}/jar/${rootProject.name}-wpFetch",
    exeSh: "wpfetch.sh"
]

ext.webpackSetting = [
    gradleBuildJs: 'gradle-build.js',
    libraryTarget: 'umd',
    mainSrcTemplate: 'src/php/client-resources.php',
    mainStyleSrc: 'src/site/style/main.scss',
    mainSubStyleSrc: ['src/site/style/services.scss'], 
    mainHtmlOutput: 'client-resources.php',
    mainCssOutput: 'mainCss.css',

    siteMgrSrcTemplate: 'src/php/site-mgr-client-resources.php',
    siteMgrStyleSrc: 'src/site-manager/style/site-mgr-main.scss',
    siteMgrHtmlOutput: 'site-mgr-client-resources.php',
    siteMgrCssOutput: 'siteMgrCss.css',

    postsMgrSrcTemplate: 'src/php/posts-mgr-client-resources.php',
    postsMgrStyleSrc: 'src/site/style/posts-mgr-main.scss',
    postsMgrHtmlOutput: 'posts-mgr-client-resources.php',
    postsMgrCssOutput: 'postsMgrCss.css',

    postSrcTemplate: 'src/php/post-client-resources.php',
    postStyleSrc: 'src/site/style/post-main.scss',
    postHtmlOutput: 'post-client-resources.php',
    postCssOutput: 'postCss.css',


    messageMgrSrcTemplate: 'src/php/message-mgr-client-resources.php',
    messageMgrStyleSrc: 'src/site/style/message-mgr-main.scss',
    messageMgrHtmlOutput: 'message-mgr-client-resources.php',
    messageMgrCssOutput: 'messageMgrCss.css',



    jsProgramDir: 'js',
    cssDir: 'css'
]

ext.webpackSetting.gradleBuildPath =
    new File(new File(projectDir, "webpack.config.d"),
         "_${webpackSetting.gradleBuildJs}")

ext.karmaWebpackSetting = [
    gradleBuildPath: new File(new File(projectDir, "karma.config.d"),
        "_${webpackSetting.gradleBuildJs}")
]

ext.buildSiteDependsMode = 'Development'
// ext.buildSiteDependsMode = 'Production'




kotlin {
    jvm {
        compilations.create('wpFetch')
    }

    js {
        compilations.create('siteMgr')
        compilations.create('postsMgr')
        compilations.create('post')
        compilations.create('messageMgr')

        browser {
            webpackTask {
                output.libraryTarget = webpackSetting.libraryTarget
            }
        }
    }

    sourceSets {

        jvmCommon {
            dependencies {
                implementation 'com.google.code.gson:gson:2.8.7'
            }
        }
        
        jvmMain {
            dependsOn jvmCommon
            dependencies {
                implementation 'gnu.getopt:java-getopt:1.0.13'
                implementation 'com.google.guava:guava:23.0'
            }
        }
        jvmWpFetch {
            dependsOn jvmCommon

        }
 
        jsCommon {
            dependsOn commonMain
            dependencies {
                implementation kotlin('stdlib-js')
                implementation( 
                    'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3')
                compileOnly npm('html-webpack-plugin', '^4.0.2')
                compileOnly npm('webpack-cdn-plugin', '>=3.3.1')
                compileOnly npm('clean-webpack-plugin', '>=4.0.0-alpha.0')
                compileOnly npm('html-webpack-skip-assets-plugin', '>=1.0.1')
                compileOnly npm('mini-css-extract-plugin', '>=1.4.0')
                compileOnly npm('@fortawesome/fontawesome-free', '>=5.15.1')
                compileOnly npm('bootstrap', '>=4.5.3')
                compileOnly npm('jquery', '>=3.5.1')
                compileOnly npm('sass', '>=1.32.8')
                compileOnly npm('css-loader', '>=5.2.0')
                compileOnly npm('sass-loader', '^10.1.1')
                compileOnly npm('@popperjs/core', '>=2.9.2')
            }
        }
        jsMain {
            dependsOn jsCommon
        }
        jsSiteMgr {
            dependsOn jsCommon
        }
        jsPostsMgr {
            dependsOn jsCommon
        }
        jsPost {
            dependsOn jsCommon
        }
        jsMessageMgr{
            dependsOn jsCommon
        }
    }
}

def getRuntimeDependencyFiles(def compilationName) {
    return kotlin.targets.jvm.compilations[
        compilationName].runtimeDependencyFiles
}


task copyDependsJar {

    doLast {

        def classes = getRuntimeDependencyFiles('main')
        classes += jvmJar.archivePath

        copy {
            from classes
            into jarApp.output
        }
    }
}
copyDependsJar.dependsOn jvmJar


task createAppScript {

    doLast {
        def classes = getRuntimeDependencyFiles('main')
        classes += jvmJar.archivePath

         
        def classPathArray = []
        classes.each {
            classPathArray.add("\${JAR_ROOT_DIR}/${it.name}")
        }
    
        def classPaths = classPathArray.join(':') 
        def binding = [
            classpaths: "-cp \"${classPaths}\"",
            mainclass: 'net.oc_soft.sgen.App'
        ]
        def runJarSrc0 = new File("${projectDir}/tools/run-jar-0.sh")
        def runJarSrc1 = new File("${projectDir}/tools/run-jar-1.sh")
        def tmp = new groovy.text.StreamingTemplateEngine()
        tmp = tmp.createTemplate(runJarSrc1)
        def jarSh = runJarSrc0.text + tmp.make(binding)


        def shPath = new File("${jarApp.output}/${jarApp.exeSh}")
        shPath.text = jarSh
        shPath.executable = true

    }
}


createAppScript.dependsOn copyDependsJar


task buildSite {
    doLast {
        exec {
            workingDir projectDir
            executable = new File("${jarApp.output}/${jarApp.exeSh}")
        }
    }
}

buildSite.dependsOn createAppScript

task webpackGradleBuild {
    doLast {
        def jsName = webpackSetting.gradleBuildJs
        def gradleBuildSrc = new File(new File(projectDir, "tools"), jsName)    
        def jsRoot = rootPackageJson.rootPackageJson.parentFile
        def mainSrcTemplate = new File(projectDir,
            webpackSetting.mainSrcTemplate) 
        def mainStyleTemplate = new File(projectDir,
            webpackSetting.mainStyleSrc)

        def siteMgrSrcTemplate = new File(projectDir,
            webpackSetting.siteMgrSrcTemplate) 
        def siteMgrStyleTemplate = new File(projectDir,
            webpackSetting.siteMgrStyleSrc)


        def postsMgrSrcTemplate = new File(projectDir,
            webpackSetting.postsMgrSrcTemplate) 
        def postsMgrStyleTemplate = new File(projectDir,
            webpackSetting.postsMgrStyleSrc)

        def postSrcTemplate = new File(projectDir,
            webpackSetting.postSrcTemplate) 
        def postStyleTemplate = new File(projectDir,
            webpackSetting.postStyleSrc)


        def messageMgrSrcTemplate = new File(projectDir,
            webpackSetting.messageMgrSrcTemplate) 
        def messageMgrStyleTemplate = new File(projectDir,
            webpackSetting.messageMgrStyleSrc)


        def binding = [
            config: """{
            |  projectDir: '${projectDir}',
            |  libraryTarget: '${webpackSetting.libraryTarget}',
            |  jsRootDir: '${jsRoot}',
            |  mainHtmlOutput: '${webpackSetting.mainHtmlOutput}',
            |  siteMgrHtmlOutput: '${webpackSetting.siteMgrHtmlOutput}',
            |  postsMgrHtmlOutput: '${webpackSetting.postsMgrHtmlOutput}',
            |  postHtmlOutput: '${webpackSetting.postHtmlOutput}',
            |  messageMgrHtmlOutput: '${webpackSetting.messageMgrHtmlOutput}',
            |  programDir: '${webpackSetting.jsProgramDir}',
            |  cssDir: '${webpackSetting.cssDir}',
            |  mainProgramName: '${appNames[0][0]}',
            |  mainSrcTemplate: '${mainSrcTemplate}',
            |  mainSrcCss: '${mainStyleTemplate}',
            |  siteMgrProgramName: '${appNames[1][0]}',
            |  siteMgrSrcTemplate: '${siteMgrSrcTemplate}',
            |  siteMgrSrcCss: '${siteMgrStyleTemplate}',
            |  siteMgrDevEntry: '${siteMgrDceDevOutput}',
            |  siteMgrEntry: '${siteMgrDceOutput}',
            |  postsMgrProgramName: '${appNames[2][0]}',
            |  postsMgrSrcTemplate: '${postsMgrSrcTemplate}',
            |  postsMgrSrcCss: '${postsMgrStyleTemplate}',
            |  postsMgrDevEntry: '${postsMgrDceDevOutput}',
            |  postsMgrEntry: '${postsMgrDceOutput}',
            |  postProgramName: '${appNames[3][0]}',
            |  postSrcTemplate: '${postSrcTemplate}',
            |  postSrcCss: '${postStyleTemplate}',
            |  postDevEntry: '${postDceDevOutput}',
            |  postEntry: '${postDceOutput}',
            |  messageMgrProgramName: '${appNames[4][0]}',
            |  messageMgrSrcTemplate: '${messageMgrSrcTemplate}',
            |  messageMgrSrcCss: '${messageMgrStyleTemplate}',
            |  messageMgrDevEntry: '${messageMgrDceDevOutput}',
            |  messageMgrEntry: '${messageMgrDceOutput}'
            |}""".stripMargin()
        ]
        def tmp = new groovy.text.StreamingTemplateEngine()
        tmp = tmp.createTemplate(gradleBuildSrc) 
        def gradleBuildContents = tmp.make(binding)
        webpackSetting.gradleBuildPath.text = gradleBuildContents
        karmaWebpackSetting.gradleBuildPath.text = gradleBuildContents
    }
}

def setupWebpack(def webpackTask) {

    def mainSrcTemplate = new File(projectDir,
        webpackSetting.mainSrcTemplate) 
    def mainStyleTemplate = new File(projectDir,
        webpackSetting.mainStyleSrc)

    def siteMgrSrcTemplate = new File(projectDir,
        webpackSetting.siteMgrSrcTemplate) 
    def siteMgrStyleTemplate = new File(projectDir,
        webpackSetting.siteMgrStyleSrc)

    def postsMgrSrcTemplate = new File(projectDir,
        webpackSetting.postsMgrSrcTemplate) 
    def postsMgrStyleTemplate = new File(projectDir,
        webpackSetting.postsMgrStyleSrc)


    def postSrcTemplate = new File(projectDir,
        webpackSetting.postSrcTemplate) 
    def postStyleTemplate = new File(projectDir,
        webpackSetting.postStyleSrc)

    def messageMgrSrcTemplate = new File(projectDir,
        webpackSetting.messageMgrSrcTemplate) 
    def messageMgrStyleTemplate = new File(projectDir,
        webpackSetting.messageMgrStyleSrc)


    webpackTask.inputs.files mainSrcTemplate,
        mainStyleTemplate,
        siteMgrSrcTemplate,
        siteMgrStyleTemplate,
        postsMgrSrcTemplate,
        postsMgrStyleTemplate,
        postSrcTemplate,
        postStyleTemplate,
        messageMgrSrcTemplate,
        messageMgrStyleTemplate



    webpackSetting.mainSubStyleSrc.each {
        webpackTask.inputs.files new File(projectDir, it)
    }


    webpackTask.inputs.files files("${projectDir}/webpack.config.d/*.js")


    def distDir = getDistributionDir()
    def cssOutDir = new File(distDir, webpackSetting.cssDir)

    webpackTask.outputs.files new File(distDir, webpackSetting.mainHtmlOutput),
        new File(cssOutDir, webpackSetting.mainCssOutput)

    webpackTask.outputs.files new File(
            distDir, webpackSetting.siteMgrHtmlOutput),
        new File(cssOutDir, webpackSetting.siteMgrCssOutput)

    webpackTask.outputs.files new File(
        distDir, webpackSetting.postsMgrHtmlOutput),
        new File(cssOutDir, webpackSetting.postsMgrCssOutput)

    webpackTask.outputs.files new File(
        distDir, webpackSetting.postHtmlOutput),
        new File(cssOutDir, webpackSetting.postCssOutput)

    webpackTask.outputs.files new File(
        distDir, webpackSetting.messageMgrHtmlOutput),
        new File(cssOutDir, webpackSetting.messageMgrCssOutput)


    webpackTask.dependsOn webpackGradleBuild
}

setupWebpack(jsBrowserProductionWebpack)
setupWebpack(jsBrowserDevelopmentWebpack)

/**
 * get distribution directory
 */
def getDistributionDir() {
    def result = null
    kotlin {
        js {
            browser {
                distribution {
                    result = directory
                }
            }
        }
    }
    return result
}

/**
 * get index template source
 */
def getWebpackHtmlOutput() {
    return [
        new File(getDistributionDir(), webpackSetting.mainHtmlOutput),
        new File(getDistributionDir(), webpackSetting.siteMgrHtmlOutput),
        new File(getDistributionDir(), webpackSetting.postsMgrHtmlOutput),
        new File(getDistributionDir(), webpackSetting.postHtmlOutput),
        new File(getDistributionDir(), webpackSetting.messageMgrHtmlOutput)
    ]
}

def readSgenSetting() {
    def sgenSetting = new File("${projectDir}/sgen-setting.json")
    return new groovy.json.JsonSlurper().parseText(sgenSetting.text)
}

task jsResourcesForSite {

    doLast {
        
        def sgenSetting = readSgenSetting()
        def outputRoot = sgenSetting['output-root']
        def distDir = getDistributionDir() 
        
        copy {
            from getWebpackHtmlOutput()
            into "${outputRoot}/lib"
        }

        delete "${outputRoot}/${webpackSetting.jsProgramDir}",
            "${outputRoot}/${webpackSetting.cssDir}"
        
        copy {
            from "${distDir}/${webpackSetting.jsProgramDir}"
            include '*.js'
            include '*.map'
            into "${outputRoot}/${webpackSetting.jsProgramDir}"
        }
        copy {
            from "${distDir}/${webpackSetting.cssDir}"
            include '*.css'
            into "${outputRoot}/${webpackSetting.cssDir}"
        }

    }
}

jsResourcesForSite.dependsOn tasks.getByPath(
    "jsBrowser${buildSiteDependsMode}Webpack")

buildSite.dependsOn jsResourcesForSite

/** get developement dce name as string */
def getDceDevDir() {
    def browserClass = null
    browserClass = 
        org.jetbrains.kotlin.gradle.targets.js.subtargets.KotlinBrowserJs 
    return browserClass.DCE_DEV_DIR
}

/** get dce name as string*/
def getDceDir() {
    def browserClass = null
    browserClass = 
        org.jetbrains.kotlin.gradle.targets.js.subtargets.KotlinBrowserJs 
    return browserClass.DCE_DIR
}
/** create npm project */
def createNpmProject(def compilation) {
    def result = null
    result = new org.jetbrains.kotlin.gradle.targets.js.npm.NpmProject(
        compilation)
    return result
}


/**
 * setup dce task
 */
def setupDceTask(def dceTask,
    def compilation,
    def dceDir) {
    dceTask.kotlinFilesOnly = true
    dceTask.classpath = project.configurations.getByName(
        compilation.runtimeDependencyConfigurationName)
    if (dceTask.dceOptions.outputDirectory != null) {
        dceTask.destinationDir = new File(
            dceTask.dceOptions.outputDirectory)
    } else {
        def npmProject = createNpmProject(compilation)
        dceTask.destinationDir = new File(npmProject.dir, dceDir)
    }
    dceTask.source(compilation.compileKotlinTask.outputFile)
    dceTask.dependsOn compilation.compileKotlinTask
}


task siteMgrDce(
    type: org.jetbrains.kotlin.gradle.tasks.KotlinJsDce) {
    description 'apply dead code eliminating to site manager js file'
    def dceDir = getDceDir() 
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.siteMgr
    } 
    setupDceTask(it, compilation, dceDir)
}

task siteMgrDceDev(
    type: org.jetbrains.kotlin.gradle.tasks.KotlinJsDce) {
    description 'apply dead code eliminating to site manager js file'
    def dceDir = getDceDevDir() 
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.siteMgr
    } 
    setupDceTask(it, compilation, dceDir)
}

/**
 * get mswp status output directory
 */
def getSiteMgrDceOutput() {
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.siteMgr
    }
    def kotlinTask = compilation.compileKotlinTask
    return new File(siteMgrDce.destinationDir, 
        kotlinTask.outputFile.name)       
}

/**
 * get locale setup output directory
 */
def getSiteMgrDceDevOutput() {
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.siteMgr
    }
    def kotlinTask = compilation.compileKotlinTask
    return new File(siteMgrDceDev.destinationDir, 
        kotlinTask.outputFile.name)       
}

jsBrowserProductionWebpack.inputs.files getSiteMgrDceOutput()
jsBrowserDevelopmentWebpack.inputs.files getSiteMgrDceDevOutput()

jsBrowserProductionWebpack.dependsOn siteMgrDce
jsBrowserDevelopmentWebpack.dependsOn siteMgrDceDev



task siteMgrMsgFmt(type: net.oc_soft.MsgFmtTask) {
    srcDir = new File("${projectDir}/src/site-manager/contents/i18n")
    dstDir = new File("${projectDir}/src/site-manager/i18n")
}



task postsMgrDce(
    type: org.jetbrains.kotlin.gradle.tasks.KotlinJsDce) {
    description 'apply dead code eliminating to posts manager js file'
    def dceDir = getDceDir() 
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.postsMgr
    } 
    setupDceTask(it, compilation, dceDir)
}

task postsMgrDceDev(
    type: org.jetbrains.kotlin.gradle.tasks.KotlinJsDce) {
    description 'apply dead code eliminating to posts manager js file'
    def dceDir = getDceDevDir() 
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.postsMgr
    } 
    setupDceTask(it, compilation, dceDir)
}

/**
 * get posts manager dce output directory
 */
def getPostsMgrDceOutput() {
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.postsMgr
    }
    def kotlinTask = compilation.compileKotlinTask
    return new File(postsMgrDce.destinationDir, 
        kotlinTask.outputFile.name)       
}

/**
 * get posts manager output directory
 */
def getPostsMgrDceDevOutput() {
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.postsMgr
    }
    def kotlinTask = compilation.compileKotlinTask
    return new File(postsMgrDceDev.destinationDir, 
        kotlinTask.outputFile.name)       
}

jsBrowserProductionWebpack.inputs.files getPostsMgrDceOutput()
jsBrowserDevelopmentWebpack.inputs.files getPostsMgrDceDevOutput()

jsBrowserProductionWebpack.dependsOn postsMgrDce
jsBrowserDevelopmentWebpack.dependsOn postsMgrDceDev


task postDce(
    type: org.jetbrains.kotlin.gradle.tasks.KotlinJsDce) {
    description 'apply dead code eliminating to post js file'
    def dceDir = getDceDir() 
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.post
    } 
    setupDceTask(it, compilation, dceDir)
}

task postDceDev(
    type: org.jetbrains.kotlin.gradle.tasks.KotlinJsDce) {
    description 'apply dead code eliminating to post js file'
    def dceDir = getDceDevDir() 
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.post
    } 
    setupDceTask(it, compilation, dceDir)
}

/**
 * get post dce output directory
 */
def getPostDceOutput() {
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.post
    }
    def kotlinTask = compilation.compileKotlinTask
    return new File(postDce.destinationDir, 
        kotlinTask.outputFile.name)       
}

/**
 * get post output directory
 */
def getPostDceDevOutput() {
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.post
    }
    def kotlinTask = compilation.compileKotlinTask
    return new File(postDceDev.destinationDir, 
        kotlinTask.outputFile.name)       
}

jsBrowserProductionWebpack.inputs.files getPostDceOutput()
jsBrowserDevelopmentWebpack.inputs.files getPostDceDevOutput()

jsBrowserProductionWebpack.dependsOn postDce
jsBrowserDevelopmentWebpack.dependsOn postDceDev


task messageMgrDce(
    type: org.jetbrains.kotlin.gradle.tasks.KotlinJsDce) {
    description 'apply dead code eliminating to message manager js file'
    def dceDir = getDceDir() 
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.messageMgr
    } 
    setupDceTask(it, compilation, dceDir)
}

task messageMgrDceDev(
    type: org.jetbrains.kotlin.gradle.tasks.KotlinJsDce) {
    description 'apply dead code eliminating to message manager js file'
    def dceDir = getDceDevDir() 
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.messageMgr
    } 
    setupDceTask(it, compilation, dceDir)
}

/**
 * get post dce output directory
 */
def getMessageMgrDceOutput() {
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.messageMgr
    }
    def kotlinTask = compilation.compileKotlinTask
    return new File(messageMgrDce.destinationDir, 
        kotlinTask.outputFile.name)       
}

/**
 * get post output directory
 */
def getMessageMgrDceDevOutput() {
    def compilation = null
    kotlin.js {
        compilation = owner.compilations.messageMgr
    }
    def kotlinTask = compilation.compileKotlinTask
    return new File(messageMgrDceDev.destinationDir, 
        kotlinTask.outputFile.name)       
}

jsBrowserProductionWebpack.inputs.files getMessageMgrDceOutput()
jsBrowserDevelopmentWebpack.inputs.files getMessageMgrDceDevOutput()

jsBrowserProductionWebpack.dependsOn messageMgrDce
jsBrowserDevelopmentWebpack.dependsOn messageMgrDceDev


buildSite.dependsOn siteMgrMsgFmt

def getRsyncSiteSetting() {
    def settingPath = new File(projectDir, 'rsync-site.json')
    return new groovy.json.JsonSlurper().parseText(settingPath.text)
}


task rsyncWebSite {

    def timeStamp = new File(buildDir, 'rsync-time-stamp.txt')
    def sgenSetting = readSgenSetting()
    def outputRoot = sgenSetting['output-root']

    doLast {
        exec {
            def setting = getRsyncSiteSetting() 
     
            if (setting['port']) {
                args "--port=${setting['port']}"
            }
            args '-r', '--exclude-from=rsync-ignore.txt', 
                "${outputRoot}/", setting['remote']
            executable = 'rsync'

            println commandLine
            
            timeStamp.text = new Date().format('yyyyMMddHHmmss') 
        }
    }
}

rsyncWebSite.dependsOn buildSite


task jvmWpFetchJar(type: Jar) {
    def comp = kotlin.targets.jvm.compilations['wpFetch']
    from comp.output.allOutputs
    archiveFileName = "${project.name}-${comp.compilationName}.jar"
}

jvmWpFetchJar.dependsOn jvmWpFetchClasses

task copyDependsWpFetchJar {
    doLast {
        def classes = getRuntimeDependencyFiles('wpFetch')
        classes += jvmWpFetchJar.archivePath

        copy {
            from classes
            into jarWpFetchApp.output
        }
    }
}

copyDependsWpFetchJar.dependsOn jvmWpFetchJar

task createWpFetchAppScript {

    doLast {
        def classes = getRuntimeDependencyFiles('wpFetch')
        classes += jvmWpFetchJar.archivePath

         
        def classPathArray = []
        classes.each {
            classPathArray.add("\${JAR_ROOT_DIR}/${it.name}")
        }
    
        def classPaths = classPathArray.join(':') 
        def binding = [
            classpaths: "-cp \"${classPaths}\"",
            mainclass: 'net.oc_soft.wp_fetch.App'
        ]
        def runJarSrc0 = new File("${projectDir}/tools/run-jar-0.sh")
        def runJarSrc1 = new File("${projectDir}/tools/run-jar-1.sh")
        def tmp = new groovy.text.StreamingTemplateEngine()
        tmp = tmp.createTemplate(runJarSrc1)
        def jarSh = runJarSrc0.text + tmp.make(binding)


        def shPath = new File("${jarWpFetchApp.output}/${jarWpFetchApp.exeSh}")
        shPath.text = jarSh
        shPath.executable = true

    }
}


createWpFetchAppScript.dependsOn copyDependsWpFetchJar


task copyWpToWebSite {

    doLast {
        def sgenSetting = readSgenSetting()
        def outputRoot = sgenSetting['output-root']

        copy {
            from "wordpress"
            into "${outputRoot}/wordpress"    
            include "**"
        }
    }
}

buildSite.dependsOn copyWpToWebSite

// vi: se ts=4 sw=4 et:
