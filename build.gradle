

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.6.0'
    id 'net.oc_soft.msgfmt' version '0.1.0'
}

repositories {
    jcenter()
}


/**
 * snake to camel case
 */
String.metaClass.snakeToCamel = {

   replaceAll('(_|-)([a-z])') { it[2].toUpperCase() }
}

ext.styles = [
    'style-scss': [
        input: file('src/site/style/style.scss'),
        outputName: 'style.css'
    ],
    'nbs-scss-root': [
        input: file('src/site/style/main-root.scss'),
        outputName: 'nbs-root.css'
    ],
    'nbs-scss': [
        input: file('src/site/style/main.scss'),
        outputName: 'nbs.css'
    ],
    'post-mgr-scss': [
        input: file('src/site/style/post-mgr.scss'),
        outputName: 'post-mgr.css'
    ],
    'post-scss': [
        input: file('src/site/style/post.scss'),
        outputName: 'post.css'
    ], 
    'message-mgr-scss': [
        input: file('src/site/style/message-mgr.scss'),
        outputName: 'message-mgr.css'
    ],
    'work-us-mgr': [
        input: file('src/site/style/work-us-mgr.scss'),
        outputName: 'work-us-mgr.css'
    ]
]

ext.appNames = [
    'main': [
        compile: ['js', 'jvm' ],
        'js-name': 'nbs'
    ],
    'post-mgr': [
        compile: ['js']
    ],
    'post': [
        compile: ['js']
    ],
    'message-mgr': [
        compile: ['js']
    ],
    'work-us-mgr': [
        compile: ['js']
    ],
    'jp-addr-conv': [
        compile: ['jvm']
    ]
]

ext.html = [:]

ext.htmlCdn = [:]


ext.browserClass = 
    org.jetbrains.kotlin.gradle.targets.js.subtargets.KotlinBrowserJs 

ext.dceDir = browserClass.DCE_DIR
ext.dceDevDir = browserClass.DCE_DEV_DIR

ext.jarApp = [
    output: "${buildDir}/jar/${rootProject.name}",
    exeSh: "gen.sh"
]


ext.jarJpAddrConvApp = [
    output: "${buildDir}/jar/${rootProject.name}-jpAddrConv",
    exeSh: "jpAddrConv.sh"
]

ext.webpackSetting = [
    gradleBuildJs: 'gradle-build.js',
    libraryTarget: 'umd',
    jsProgramDir: 'js',
    cssDir: 'css',
    externals: [
        kotlin: 'kotlin'
    ],
    bundleReport: [
        externals: [
            kotlin: [
               url: 'https://unpkg.com/kotlin@1.6.0'
            ]
        ]
    ]
]

ext.webpackSetting.gradleBuildPath =
    file("webpack.config.d/00_${webpackSetting.gradleBuildJs}")

ext.karmaWebpackSetting = [
    gradleBuildPath: file("karma.config.d/00_${webpackSetting.gradleBuildJs}")
]


ext.buildSiteDependsMode = 'Development'
// ext.buildSiteDependsMode = 'Production'

ext.jpAddrSetting = [
    addressSource: "address-jp/address.csv",
    options: [
        [
            convopt: "ZIP",
            output: "postal-number.json"
        ],
        [
            convopt: "PREF_CITY",
            output: "pref-city.json"
        ]
    ]
]

/**
 * get application names without default entry
 */
def getAppNamesWithoutDefault() {
    def result = [:]
    appNames.each {
        key, value ->
        if (key != 'main') {
            result.put(key, value)
        }
    }
    return result
}


def createCompilation(
    def compilations,
    def kind) {
    appNamesWithoutDefault.each {
        key, value ->
        if (value.compile.contains(kind)) {
            compilations.create(key.snakeToCamel())
        }
    }
}


kotlin {
    jvm {
        createCompilation(compilations, 'jvm')
    }

    js {
        createCompilation(compilations, 'js')

        browser {
            webpackTask {
                output.libraryTarget = webpackSetting.libraryTarget
            }
        }
    }

    sourceSets {
        jvmCommon {
            dependencies {
                implementation 'com.google.code.gson:gson:2.8.7'
            }
        }
        jvmMain {
            dependsOn jvmCommon
            dependencies {
                implementation 'gnu.getopt:java-getopt:1.0.13'
                implementation 'com.google.guava:guava:23.0'
            }
        }

        jvmJpAddrConv {
            dependsOn jvmCommon
            dependencies {
                implementation 'gnu.getopt:java-getopt:1.0.13'
                implementation 'com.google.guava:guava:23.0'
                implementation 'org.apache.commons:commons-csv:1.9.0'
            }
        }
 
        jsCommon {
            dependsOn commonMain
            dependencies {
                implementation kotlin('stdlib-js')
                implementation( 
                    'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3')
                compileOnly npm('html-webpack-plugin', '>=4.0.2')
                compileOnly npm('webpack-cdn-plugin', '>=3.3.1')
                compileOnly npm('clean-webpack-plugin', '>=4.0.0-alpha.0')
                compileOnly npm('mini-css-extract-plugin', '>=1.4.0')
                compileOnly npm('@fortawesome/fontawesome-free', '>=5.15.1')
                compileOnly npm('bootstrap', '>=5.0.0')
                compileOnly npm('jquery', '>=3.5.1')
                compileOnly npm('sass', '>=1.32.8')
                compileOnly npm('css-loader', '>=5.2.0')
                compileOnly npm('sass-loader', '>=10.1.1')
                compileOnly npm('@popperjs/core', '>=2.9.2')
            }
        }

        jsMain {
            dependsOn jsCommon
        }
        jsPostMgr {
            dependsOn jsCommon
        }
        
        jsPost {
            dependsOn jsCommon
        }
        jsMessageMgr{
            dependsOn jsCommon
        }
        jsWorkUsMgr{
            dependsOn jsCommon
        }
    }
}

appNamesWithoutDefault.forEach {
    key, value ->
    if (value.compile.contains('js')) {
        def jsCompilation = getJsCompilation(key)
        tasks.create(
            "${key.snakeToCamel()}Dce",
            net.oc_soft.JsDceTask) {
            setupDceTask(it, jsCompilation, dceDir)
            jsBrowserProductionWebpack.dependsOn it
        }
        jsBrowserProductionWebpack.inputs.files getDceOutput(
            key.snakeToCamel(), false)

        tasks.create(
            "${key.snakeToCamel()}DceDev",
            net.oc_soft.JsDceTask) {
            setupDceTask(it, jsCompilation, dceDevDir)
            jsBrowserDevelopmentWebpack.dependsOn it
        }
        jsBrowserDevelopmentWebpack.inputs.files getDceOutput(
            key.snakeToCamel(), true)

    }
}
/**
 * create compiled javascript entry
 */
def createJsEntries(String mode) {
    appNamesWithoutDefault.findAll {
        key, value ->
        value.compile.contains('js')
    }.collectEntries { 
        key, value ->
        def compilationName = key.snakeToCamel()
        [ key, getDceOutput(compilationName, mode == 'development') ]
    } 
}

/**
 * create style entries
 */
def createStyleEntries() {
    return styles.collectEntries {
        key, value ->
        [key, value.input] 
    }
}

/**
 * create mapping data for css output
 */
def createCssOutputMap() {
    return styles.collectEntries {
        key, value ->
        [key, value.outputName]
    }
}

task webpackGradleBuild {
    doLast {
        def buildSetting = [:] 
        def jsEntries = [:] 
        ['development', 'production'].each {
            jsEntries[it]  = createJsEntries(it)
        }        
        buildSetting['js'] = jsEntries 
        buildSetting['style'] = createStyleEntries()
        buildSetting['cssOutput'] = createCssOutputMap()
        buildSetting['jsDir'] = webpackSetting.jsProgramDir
        buildSetting['cssDir'] = webpackSetting.cssDir
        buildSetting['externals'] = webpackSetting.externals
        buildSetting['mainProgramName'] = appNames['main']['js-name']
        buildSetting['jsRootDir'] = 
            rootPackageJson.rootPackageJson.parentFile.toString()
        buildSetting['bundle-report'] = webpackSetting.bundleReport
        buildSetting['html'] = html
        buildSetting['htmlCdn'] = htmlCdn
        buildSetting['cssOutput'] = createCssOutputMap()   
        def tmp = new groovy.text.StreamingTemplateEngine()
        def gradleBuildSrc = file("tools/${webpackSetting.gradleBuildJs}")
        tmp = tmp.createTemplate(gradleBuildSrc) 
        def jsonGenerator = new groovy.json.JsonGenerator.Options()
            .addConverter(File.class) { it.toString() }
            .build()
            
        def buildConfig = groovy.json.JsonOutput.prettyPrint(
            jsonGenerator.toJson(buildSetting))
        def gradleBuildContents = tmp.make([
            config: buildConfig
        ])
        webpackSetting.gradleBuildPath.text = gradleBuildContents
        karmaWebpackSetting.gradleBuildPath.text = gradleBuildContents
    }
}



def getRuntimeDependencyFiles(def compilationName) {
    return kotlin.targets.jvm.compilations[
        compilationName].runtimeDependencyFiles
}


task copyDependsJar {

    doLast {

        def classes = getRuntimeDependencyFiles('main')
        classes += jvmJar.archivePath

        copy {
            from classes
            into jarApp.output
        }
    }
}
copyDependsJar.dependsOn jvmJar


task createAppScript {

    doLast {
        def classes = getRuntimeDependencyFiles('main')
        classes += jvmJar.archivePath

         
        def classPathArray = []
        classes.each {
            classPathArray.add("\${JAR_ROOT_DIR}/${it.name}")
        }
    
        def classPaths = classPathArray.join(':') 
        def binding = [
            classpaths: "-cp \"${classPaths}\"",
            mainclass: 'net.oc_soft.sgen.App'
        ]
        def runJarSrc0 = new File("${projectDir}/tools/run-jar-0.sh")
        def runJarSrc1 = new File("${projectDir}/tools/run-jar-1.sh")
        def tmp = new groovy.text.StreamingTemplateEngine()
        tmp = tmp.createTemplate(runJarSrc1)
        def jarSh = runJarSrc0.text + tmp.make(binding)


        def shPath = new File("${jarApp.output}/${jarApp.exeSh}")
        shPath.text = jarSh
        shPath.executable = true

    }
}

createAppScript.dependsOn copyDependsJar


/**
 * build wordpress extenseion
 */
task buildWpExtensionJs {

    def execParams = [
        [
            dir: 'wp-color-ext',
            args: [
                'run',
                'build'
            ] 
        ],
        [
            dir: 'wp-iris-alpha-js',
            args: [
                'run',
                'build'
            ]
        ],
        [
            dir: 'wp-color-picker-alpha-js',
            args: [
                'run',
                'build' 
            ]
        ],
        [
            dir: 'oc-color-picker-alpha',
            args: [
                'run',
                'build'
            ]
        ],
        [
            dir: 'oc-range',
            args: [
                'run',
                'build'
            ]
        ]
    ]
    doLast {
        execParams.each {
            def execWorkingDir = it.dir
            def execArgs = it.args
            exec {
                executable = 'npm'
                workingDir = execWorkingDir
                args execArgs
            }
        }
    }
}


task buildSite {
    doLast {
        exec {
            workingDir projectDir
            executable = new File("${jarApp.output}/${jarApp.exeSh}")
        }
    }
    /**
     * copy wordpress color extention into wp theme directory
     */
    doLast  {
        def outputDir = readSgenSetting()['output-root']
        outputDir = "${outputDir}/js"

        [
            "${projectDir}/wp-color-picker-alpha-js/dist/",
        ].each {
            def srcDir = it 
            copy {
                from srcDir
                into outputDir
                include "**/*.js"
            }
        }
    }
    /**
     * copy color picker alpha extention into wp theme directory
     */
    doLast  {
        def outputDir = readSgenSetting()['output-root']
        outputDir = "${outputDir}/js"

        [
            "${projectDir}/wp-color-ext/dist/",
        ].each {
            def srcDir = it 
            copy {
                from srcDir
                into outputDir
                include "**/*.js"
            }
        }
    }
    /**
     * copy iris color picker alpha into wp theme directory
     */
    doLast  {
        def outputDir = readSgenSetting()['output-root']
        outputDir = "${outputDir}/js"

        [
            "${projectDir}/wp-iris-alpha-js/dist/",
        ].each {
            def srcDir = it 
            copy {
                from srcDir
                into outputDir
                include "**/*.js"
            }
        }
    }
    /**
     * copy wordpress exntension for theme
     */
    doLast {
        def outputRootDir = readSgenSetting()['output-root']
        def outputDir = "${outputRootDir}/js"

        copy {
            from "${projectDir}/oc-color-picker-alpha/dist/js"
            into outputDir
            include "**/*.js"
        }
        outputDir = "${outputRootDir}/lib"
        copy {
            from "${projectDir}/oc-color-picker-alpha/dist/php"
            into outputDir
            include "**/*.php"
        }
    }
    doLast {
        def outputRootDir = readSgenSetting()['output-root']
        def outputDir = "${outputRootDir}/js"

        copy {
            from "${projectDir}/oc-range/dist/js"
            into outputDir
            include "**/*.js"
        }
        outputDir = "${outputRootDir}/lib"
        copy {
            from "${projectDir}/oc-range/dist/php"
            into outputDir
            include "**/*.php"
        }
        outputDir = "${outputRootDir}/css"
        copy {
            from "${projectDir}/oc-range/dist/css"
            into outputDir
            include "**/*.css"
        }
    }

    
}

buildSite.dependsOn buildWpExtensionJs
buildSite.dependsOn createAppScript


def setupWebpack(
    def webpackTask) {

    styles.each {
        key, value ->
        webpackTask.inputs.files value.input
    }
    html.each {
        key, value ->
        webpackTask.inputs.files value.source
    }

    fileTree("${projectDir}/src/site/style/") {
        include '**/*.scss'
    }.each {
        webpackTask.inputs.files it
    }

    files("${projectDir}/webpack.config.d/*.js").each {
        if (it != webpackSetting.gradleBuildPath) {
            webpackTask.inputs.files it
        }
    }

    def distDir = getDistributionDir()

    fileTree(distDir) {
        include '**/*.js'
        include '**/*.css'
        include '**/*.php'
    }.forEach {
        webpackTask.outputs.files it
    }
    webpackTask.dependsOn webpackGradleBuild

}

setupWebpack(jsBrowserProductionWebpack)
setupWebpack(jsBrowserDevelopmentWebpack)



/**
 * get distribution directory
 */
def getDistributionDir() {
    def result = null
    kotlin {
        js {
            browser {
                distribution {
                    result = directory
                }
            }
        }
    }
    return result
}

def readSgenSetting() {
    def sgenSetting = new File("${projectDir}/sgen-setting.json")
    return new groovy.json.JsonSlurper().parseText(sgenSetting.text)
}

task jsResourcesForSite {

    doLast {
        
        def sgenSetting = readSgenSetting()
        def outputRoot = sgenSetting['output-root']
        def distDir = getDistributionDir() 
        
        copy {
            from distDir
            include '**/*.php'
            into "${outputRoot}/lib"
        }
        copy {
            from distDir
            include 'bundle-report.json'
            into outputRoot
        }

        delete "${outputRoot}/${webpackSetting.jsProgramDir}",
            "${outputRoot}/${webpackSetting.cssDir}"
        
        copy {
            from "${distDir}/${webpackSetting.jsProgramDir}"
            include '*.js'
            include '*.map'
            into "${outputRoot}/${webpackSetting.jsProgramDir}"
        }
        copy {
            from "${distDir}/${webpackSetting.cssDir}"
            include '*.css'
            into "${outputRoot}/${webpackSetting.cssDir}"
        }
        copy {
            from "${distDir}/${webpackSetting.cssDir}"
            include 'style.css'
            into outputRoot
        }

    }
}

jsResourcesForSite.dependsOn tasks.getByPath(
    "jsBrowser${buildSiteDependsMode}Webpack")

buildSite.dependsOn jsResourcesForSite

/** get developement dce name as string */
def getDceDevDir() {
    def browserClass = null
    browserClass = 
        org.jetbrains.kotlin.gradle.targets.js.subtargets.KotlinBrowserJs 
    return browserClass.DCE_DEV_DIR
}

/** get dce name as string*/
def getDceDir() {
    def browserClass = null
    browserClass = 
        org.jetbrains.kotlin.gradle.targets.js.subtargets.KotlinBrowserJs 
    return browserClass.DCE_DIR
}

/** create npm project */
def createNpmProject(def compilation) {
    def result = null
    result = new org.jetbrains.kotlin.gradle.targets.js.npm.NpmProject(
        compilation)
    return result
}


/**
 * setup dce task
 */
def setupDceTask(def dceTask,
    def compilation,
    def dceDir) {
    def npmProject = createNpmProject(compilation)
    dceTask.destinationDirectory = new File(npmProject.dir, dceDir)

    dceTask.source(compilation.compileKotlinTask.outputFile)
    dceTask.dependsOn compilation.compileKotlinTask

}

/**
 * get javascript compilation
 */
def getJsCompilation(String compilationName) {

    def result = null
    kotlin.js {
        result = compilations[compilationName.snakeToCamel()]
    }
        
    return result
}



def getDceOutput(String compilationName, boolean dev) {
    def kotlinTask = getJsCompilation(compilationName).compileKotlinTask
    def taskName = null
    if (dev) {
        taskName = "${compilationName}DceDev"
    } else {
        taskName = "${compilationName}Dce"
    }
    return new File(
        tasks.getByName(taskName).destinationDirectory,
        kotlinTask.outputFile.name)
}

/**
 * get dce output
 */
def getDceOutput(def compilationName) {
    return getDceOutput(compilationName, false)
}

/**
 * get dce development output
 */
def getDceDevOutput(def compilationName) {
    return getDceOutput(compilationName, true)
}



task siteMgrMsgFmt(type: net.oc_soft.MsgFmtTask) {
    srcDir = new File("${projectDir}/src/site-manager/contents/i18n")
    dstDir = new File("${projectDir}/src/site-manager/i18n")
}

buildSite.dependsOn siteMgrMsgFmt

def getRsyncSiteSetting() {
    def settingPath = new File(projectDir, 'rsync-site.json')
    return new groovy.json.JsonSlurper().parseText(settingPath.text)
}


task rsyncWebSite {

    def timeStamp = new File(buildDir, 'rsync-time-stamp.txt')
    def sgenSetting = readSgenSetting()
    def outputRoot = sgenSetting['output-root']

    doLast {
        exec {
            def setting = getRsyncSiteSetting() 
     
            if (setting['port']) {
                args "--port=${setting['port']}"
            }
            args '-r', '--exclude-from=rsync-ignore.txt', 
                "${outputRoot}/", setting['remote']
            executable = 'rsync'

            println commandLine
            
            timeStamp.text = new Date().format('yyyyMMddHHmmss') 
        }
    }
}

rsyncWebSite.dependsOn buildSite


task jvmJpAddrConvJar(type: Jar) {
    def comp = kotlin.targets.jvm.compilations['jpAddrConv']
    from comp.output.allOutputs
    archiveFileName = "${project.name}-${comp.compilationName}.jar"
}

jvmJpAddrConvJar.dependsOn jvmJpAddrConvClasses

task copyDependsJpAddrConvJar {
    doLast {
        def classes = getRuntimeDependencyFiles('jpAddrConv')
        classes += jvmJpAddrConvJar.archivePath

        copy {
            from classes
            into jarJpAddrConvApp.output
        }
    }
}

copyDependsJpAddrConvJar.dependsOn jvmJpAddrConvJar

task createJpAddrConvAppScript {

    doLast {
        def classes = getRuntimeDependencyFiles('jpAddrConv')
        classes += jvmJpAddrConvJar.archivePath

         
        def classPathArray = []
        classes.each {
            classPathArray.add("\${JAR_ROOT_DIR}/${it.name}")
        }
    
        def classPaths = classPathArray.join(':') 
        def binding = [
            classpaths: "-cp \"${classPaths}\"",
            mainclass: 'net.oc_soft.App'
        ]
        def runJarSrc0 = new File("${projectDir}/tools/run-jar-0.sh")
        def runJarSrc1 = new File("${projectDir}/tools/run-jar-1.sh")
        def tmp = new groovy.text.StreamingTemplateEngine()
        tmp = tmp.createTemplate(runJarSrc1)
        def jarSh = runJarSrc0.text + tmp.make(binding)


        def shPath = new File(
            "${jarJpAddrConvApp.output}/${jarJpAddrConvApp.exeSh}")
        shPath.text = jarSh
        shPath.executable = true

    }
}


createJpAddrConvAppScript.dependsOn copyDependsJpAddrConvJar



task copyWpToWebSite {

    doLast {
        def outputRoot = "${buildDir}/web-site"

        copy {
            from "wordpress"
            into outputRoot 
            include "**"
        }
    }
}

buildSite.dependsOn copyWpToWebSite

/**
 * copy plugins into web site image
 */
task copyPluginsToWebSite {

    doLast {
        def outputRoot = "${buildDir}/web-site/wp-content/plugins"

        copy {
            from "oc-pdf-viewer/build/oc-pdf-viewer"
            into "${outputRoot}/oc-pdf-viewer"
            include "**"
        }
    }
}

copyPluginsToWebSite.dependsOn ':oc-pdf-viewer:buildSiteImage'
copyPluginsToWebSite.dependsOn copyWpToWebSite
buildSite.dependsOn copyPluginsToWebSite



task generateJpAddrResource {

    def exePath = "${jarJpAddrConvApp.output}/${jarJpAddrConvApp.exeSh}"
    def sgenSetting = readSgenSetting()
    def outdir = "${sgenSetting['output-root']}/address-jp"
    jpAddrSetting.options.each {
        outputs.files new File(outdir, it.output)
    }
    inputs.files new File(projectDir, jpAddrSetting.addressSource)

    doLast {
        mkdir outdir
        jpAddrSetting.options.each {
            def outputStream = new FileOutputStream(
                "${outdir}/${it.output}")
            def convopt = it.convopt
            exec {
                workingDir projectDir
                executable = exePath
                args "-c", convopt
                args "-f", "${projectDir}/${jpAddrSetting.addressSource}"
                standardOutput outputStream
            } 
            outputStream.close()
        } 
    }
}

generateJpAddrResource.dependsOn createJpAddrConvAppScript

buildSite.dependsOn generateJpAddrResource
// vi: se ts=4 sw=4 et:
